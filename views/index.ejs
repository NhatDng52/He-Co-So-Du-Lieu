<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chọn Phim</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f4f4f4;
        }

        .phim {
            margin-bottom: 20px;
            background-color: white;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .poster {
            width: 200px;
            cursor: pointer;
            border-radius: 5px;
            transition: transform 0.3s ease;
        }

        .poster:hover {
            transform: scale(1.05);
        }

        .showtimes {
            display: none;
            margin-top: 15px;
        }

        .showtime-times span {
            display: inline-block;
            margin: 5px;
            padding: 5px 10px;
            background-color: #f0f0f0;
            border-radius: 3px;
            cursor: pointer;
        }

        .available-branches {
            display: none;
            margin-top: 10px;
            background-color: #f9f9f9;
            padding: 10px;
            border-radius: 5px;
        }

        .tickets {
            display: none;
            margin-top: 10px;
            background-color: #e0e0e0;
            padding: 10px;
            border-radius: 5px;
        }

        .seat {
            width: 40px;
            height: 40px;
            margin: 3px;
            display: inline-block;
            border: 1px solid #333;
            cursor: pointer;
            position: relative;
            text-align: center;
            line-height: 40px;
            border-radius: 5px;
        }

        .seat-available {
            background-color: #4caf50;
            color: white;
        }

        .seat-sold {
            background-color: red;
            cursor: not-allowed;
            color: white;
        }

        .seat-selected {
            background-color: yellow;
            color: black;
        }

        .payment-section {
            margin-top: 20px;
            background-color: #f9f9f9;
            padding: 15px;
            border-radius: 5px;
        }

        .hidden {
            display: none;
        }

        .screen {
            background-color: #333;
            color: white;
            text-align: center;
            margin: 10px 0;
            padding: 5px;
            border-radius: 5px;
        }

        .global-timer {
            position: fixed;
            top: 10px;
            right: 10px;
            background-color: #f44336;
            color: white;
            padding: 10px;
            border-radius: 5px;
            font-weight: bold;
        }

        .room-map {
            display: grid;
            gap: 5px;
            justify-content: center;
        }
    </style>
</head>
<body>
    <h1>Chọn Phim</h1>

    <!-- Render dữ liệu từ backend -->
    <% phim.forEach(phim => { %>
        <div class="phim">
            <img src="<%= phim.link_poster %>" alt="<%= phim.ten_phim %>" class="poster" onclick="toggleShowtimes('<%= phim.ma_phim %>')">
            <div class="showtimes" id="showtimes-<%= phim.ma_phim %>">
                <h2>Showtimes for <%= phim.ten_phim %></h2>
                <% const groupedShowtimes = suat_chieu.filter(suat => suat.ma_phim === phim.ma_phim)
                    .reduce((acc, suat) => {
                        (acc[suat.ngay_thang] = acc[suat.ngay_thang] || []).push(suat);
                        return acc;
                    }, {}); 
                %>
                <% Object.keys(groupedShowtimes).forEach(ngay_thang => { %>
                    <div class="showtime-date">
                        <strong><%= ngay_thang %></strong>
                    </div>
                    <div class="showtime-times">
                        <% groupedShowtimes[ngay_thang].forEach(suat => { %>
                            <span onclick="showBranchesForShowtime('<%= suat.ma_suat_chieu %>')">
                                <%= suat.gio %>
                            </span>
                            <div class="available-branches" id="branches-<%= suat.ma_suat_chieu %>">
                                <h3>Chi Nhánh Có Sẵn</h3>
                                <% const branches = chi_nhanh.filter(cn => cn.ma_chi_nhanh === suat.ma_chi_nhanh); 
                                    branches.forEach(branch => { 
                                %>
                                    <p>
                                        <%= branch.dia_chi_phu %>
                                        <button onclick="selectBranch('<%= suat.ma_suat_chieu %>', '<%= branch.ma_chi_nhanh %>')">Chọn</button>
                                    </p>
                                <% }); %>
                            </div>
                            <div class="tickets" id="tickets-<%= suat.ma_suat_chieu %>"></div>
                        <% }); %>
                    </div>
                <% }); %>
            </div>
        </div>
    <% }); %>

    <div class="payment-section hidden" id="payment-section">
        <h4>Tổng tiền: <span id="total-price">0</span> VND</h4>
        <button onclick="completePayment()">Thanh Toán</button>
    </div>

    <script>
        let selectedSeats = [];
        let selectedTickets = [];
        let ticketsData = {}; // Store tickets data globally
        const maxSeats = 10;
        let globalTimerInterval;
        let globalTimerEndTime;

        function toggleShowtimes(maPhim) {
            const allShowtimes = document.querySelectorAll('.showtimes');
            allShowtimes.forEach(showtimes => {
                if (showtimes.id === `showtimes-${maPhim}`) {
                    showtimes.style.display = showtimes.style.display === 'none' || showtimes.style.display === '' ? 'block' : 'none';
                } else {
                    showtimes.style.display = 'none';
                }
            });
        }

        function showBranchesForShowtime(maSuatChieu) {
            // Hide all branch lists and ticket lists
            const allBranchLists = document.querySelectorAll('.available-branches');
            const allTicketLists = document.querySelectorAll('.tickets');

            allBranchLists.forEach(branchList => {
                branchList.style.display = 'none';
            });
            allTicketLists.forEach(ticketList => {
                ticketList.style.display = 'none';
                ticketList.innerHTML = ''; // Clear previous tickets
            });

            // Show branches for this specific showtime
            const branchesList = document.getElementById(`branches-${maSuatChieu}`);
            if (branchesList) {
                branchesList.style.display = 'block';
            }
        }

        function selectBranch(maSuatChieu, maChiNhanh) {
            const ticketsDiv = document.getElementById(`tickets-${maSuatChieu}`);
            fetch(`/tickets/room/${maSuatChieu}/${maChiNhanh}`)
                .then(res => res.json())
                .then(data => {
                    if (data.phong && data.ve) {
                        ticketsData = data.ve; // Store tickets data globally
                        ticketsDiv.innerHTML = renderSeats(data.phong, data.ve);
                        ticketsDiv.style.display = 'block';
                    } else {
                        ticketsDiv.innerHTML = '<p>Không có thông tin ghế.</p>';
                    }
                })
                .catch(err => {
                    console.error('Lỗi tải ghế:', err);
                    ticketsDiv.innerHTML = '<p>Lỗi khi tải ghế.</p>';
                });
        }

        function renderSeats(phong, ve) {
            const totalSeats = phong.tong_so_ghe;
            const columns = Math.ceil(Math.sqrt(totalSeats));

            // Create a set of sold seat numbers for quick lookup
            const soldSeats = new Set(
                ve.filter(ticket => ticket.trang_thai === 'mua')
                    .map(ticket => ticket.so_ghe)
            );

            let roomMap = `<div class="room-map" style="grid-template-columns: repeat(${columns}, 40px);">`;

            for (let seatNumber = 1; seatNumber <= totalSeats; seatNumber++) {
                const seatClass = soldSeats.has(seatNumber)
                    ? 'seat seat-sold'
                    : 'seat seat-available';

                roomMap += `<div 
                    class="${seatClass}" 
                    title="Ticket ${seatNumber}"
                    data-ticket-number="${seatNumber}"
                    onclick="selectTicket(this, ${seatNumber}, ${phong.so_phong})"
                >
                    ${seatNumber}
                </div>`;
            }
            roomMap += '</div>';
            return roomMap;
        }

        function startGlobalTimer() {
            // Start with 5 minutes
            const duration = 5 * 60 * 1000; // 5 minutes in milliseconds
            globalTimerEndTime = new Date().getTime() + duration;

            // Create global timer element
            const globalTimerEl = document.createElement('div');
            globalTimerEl.id = 'global-timer';
            globalTimerEl.classList.add('global-timer');
            document.body.appendChild(globalTimerEl);

            globalTimerInterval = setInterval(() => {
                const now = new Date().getTime();
                const distance = globalTimerEndTime - now;

                if (distance < 0) {
                    clearInterval(globalTimerInterval);
                    globalTimerEl.textContent = 'Time Expired!';
                    // Automatically unlock all selected seats
                    selectedSeats.forEach(ticketNumber => {
                        unlockTicket(ticketNumber);
                    });
                    selectedSeats = [];
                    selectedTickets = [];
                    return;
                }

                const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                const seconds = Math.floor((distance % (1000 * 60)) / 1000);

                if (!isNaN(minutes) && !isNaN(seconds)) {
                    globalTimerEl.textContent = `Time Left: ${minutes}m ${seconds}s`;
                }
            }, 1000);
        }

        function selectTicket(ticketElement, seatNumber, roomNumber) {
            if (ticketElement.classList.contains('seat-sold')) {
                alert('This ticket is already sold!');
                return;
            }

            // Start global timer if not already started
            if (!globalTimerInterval) {
                startGlobalTimer();
            }

            // Toggle ticket selection
            ticketElement.classList.toggle('seat-selected');

            if (ticketElement.classList.contains('seat-selected')) {
                if (selectedSeats.length >= maxSeats) {
                    ticketElement.classList.remove('seat-selected');
                    alert(`You can only select up to ${maxSeats} seats.`);
                    return;
                }

                const ticket = ticketsData.find(ticket => ticket.so_ghe === seatNumber);
                selectedSeats.push(seatNumber);
                selectedTickets.push(ticket.ma_ve);

                // Calculate remaining time for locking
                const now = new Date().getTime();
                const remainingTime = Math.floor((globalTimerEndTime - now) / 60000);

                lockTicket(ticket.ma_ve, roomNumber, remainingTime);
            } else {
                selectedSeats = selectedSeats.filter(id => id !== seatNumber);
                const ticket = ticketsData.find(ticket => ticket.so_ghe === seatNumber);
                selectedTickets = selectedTickets.filter(id => id !== ticket.ma_ve);
                unlockTicket(ticket.ma_ve, roomNumber);
            }

            updateTotalPrice();
        }

        function lockTicket(ticketId, roomNumber, lockDuration) {
            // Ensure lock duration is at least 1 minute
            lockDuration = Math.max(1, lockDuration);

            fetch(`/tickets/lock/${ticketId}/${lockDuration}`, {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                console.log(`Ticket ${ticketId} locked until ${data.locked_until}`);
            })
            .catch(error => {
                console.error('Error locking ticket:', error);
            });
        }

        function unlockTicket(ticketId, roomNumber) {
            fetch(`/tickets/unlock/${ticketId}`, {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                console.log(`Ticket ${ticketId} unlocked.`);
            })
            .catch(error => {
                console.error('Error unlocking ticket:', error);
            });
        }

        function updateTotalPrice() {
            const totalPrice = selectedSeats.length * 100000; // Assuming each ticket costs 100,000 VND
            const paymentSection = document.getElementById('payment-section');
            const totalPriceElement = document.getElementById('total-price');

            if (totalPrice > 0) {
                paymentSection.classList.remove('hidden');
                totalPriceElement.textContent = totalPrice.toLocaleString('vi-VN');
            } else {
                paymentSection.classList.add('hidden');
            }
        }

        async function completePayment() {
            if (selectedTickets.length === 0) {
                alert('Vui lòng chọn ghế trước!');
                return;
            }

            const ticketIds = selectedTickets.join(',');
            try {
                const response = await fetch(`/tickets/complete-payment/${ticketIds}`, {
                    method: 'POST'
                });
                const data = await response.json();
                if (data.message === 'Payment completed successfully') {
                    alert(`Thanh toán thành công! Mã giao dịch: ${data.ma_giao_dich}`);
                    location.reload(); // Refresh the page
                } else {
                    alert('Thanh toán thất bại. Vui lòng thử lại.');
                }
            } catch (error) {
                console.error('Error completing payment:', error);
                alert('Thanh toán thất bại. Vui lòng thử lại.');
            }
        }

        function resetSelection() {
            selectedSeats = [];
            selectedTickets = [];
            updateTotalPrice();
        }
    </script>
</body>
</html>